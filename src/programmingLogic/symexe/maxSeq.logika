import org.sireum.logika._

//returns the maximum element in a sequence
//
//example: max of (5,1,8,2,6) is 8
def max(seq: ZS): Z = {
    l"""{
        //precondition (seq can't be empty)
        requires seq.size >= 1

        //postcondition
        ensures
            //whatever I'm returning (result) should be >= every value in the sequence
            //for all values in the sequence, result >= each one
            A k: (0..<seq.size) result >= seq(k)

            //also need: what I am returning really is an element in sequence
            //there exists a value in the sequence that matches result
            E k: (0..<seq.size) result == seq(k)
    }"""

    var maxIndex: Z = 0
    var i: Z = 1
    while (i < seq.size) {
        l"""{
            invariant
                //specify range of position counter (i)
                1 <= i
                i <= seq.size
                0 <= maxIndex
                maxIndex < seq.size //maxIndex is always a valid position in the sequence

                //for all positions I've looked at so far
                //element at position maxIndex is >= each of time
                A k: (0..<i) seq(maxIndex) >= seq(k)

                //the element at maxIndex is one of the ones I've looked at so far
                E k: (0..<i) seq(maxIndex) == seq(k)
            modifies i, maxIndex
        }"""
        if (seq(i) > seq(maxIndex)) {
            maxIndex = i
        }
        i = i + 1
    }

    return seq(maxIndex)
}

////////// Test code ///////////
var test: ZS = ZS(5,1,8,2,6)
var m: Z = max(test)

assert(m == 8)